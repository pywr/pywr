name: Build

on: [push, pull_request]

env:
  CIBW_TEST_REQUIRES: pytest platypus-opt ipython jinja2 matplotlib
  CIBW_BEFORE_TEST_LINUX: "chmod +x {project}/.github/workflows/run-tests.sh"
  CIBW_TEST_COMMAND_LINUX: "{project}/.github/workflows/run-tests.sh {project}"
  CIBW_TEST_COMMAND_WINDOWS: "{project}\\.github\\workflows\\run-tests-windows.bat {project}"
  # Only build on Python 3.10+
  CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
  # Skip 32-bit builds and MUSL Linux builds
  # MUSL Linux can be re-enabled more easily when updating from manylinux2014
  CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
  # Install GLPK
  CIBW_BEFORE_ALL_LINUX: dnf install -y almalinux-release-devel && dnf install -y glpk-devel lpsolve-devel

  # build using the manylinux_2_34 image. Can link to system provided GLPk (v5.0)
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_34
  CIBW_MANYLINUX_I686_IMAGE: manylinux2014

  # Windows binary paths to allow linking
  CIBW_ENVIRONMENT_WINDOWS: LIB="c://glpk//Library//bin;c://glpk//Library//lib;c://lpsolve" INCLUDE="c://glpk//Library//include;c://"
  # Use delvewheel on windows
  CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
  CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path \"c://glpk//Library//bin;c://lpsolve\" -w {dest_dir} {wheel}"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0   # This is required for setuptools_scm: https://github.com/pypa/setuptools_scm/issues/480

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Install WinGLPK (Windows)
        if: runner.os == 'Windows'
        shell: bash
        env:
          WINGLPK_URL: "https://anaconda.org/conda-forge/glpk/5.0/download/win-64/glpk-5.0-h8ffe710_0.tar.bz2"
        run: |
          curl -L $WINGLPK_URL --output glpk.tar.bz2
          mkdir /c/glpk
          tar -xf glpk.tar.bz2 -C /c/glpk/

      - name: Install LpSolve (Windows)
        if: runner.os == 'Windows'
        shell: bash
        env:
          LPSOLVE_URL: "https://sourceforge.net/projects/lpsolve/files/lpsolve/5.5.2.5/lp_solve_5.5.2.5_dev_win64.zip/download"
        run: |
          curl -L $LPSOLVE_URL --output lpsolve.zip
          7z x lpsolve.zip -o/c/lpsolve

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: pywr_whl_${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0   # This is required for setuptools_scm: https://github.com/pypa/setuptools_scm/issues/480

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.11'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: pywr_sdist_${{ matrix.os }}
          path: dist/*.tar.gz

  build_docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0   # This is required for setuptools_scm: https://github.com/pypa/setuptools_scm/issues/480

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.11'

      - name: Build docs
        # lpsolve doesn't compile on Ubuntu without building the library from source - disable for the time being.
        # This doesn't really matter for the documentation builds.
        run: |
          sudo apt-get install libglpk-dev          
          PYWR_BUILD_LPSOLVE=false pip install -e .[docs]
          cd docs
          make html

      - name: Deploy docs üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        # Only publish on master
        if: github.ref == 'refs/heads/master'
        with:
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: docs/build/html # The folder the action should deploy.
          CLEAN: true # Automatically remove deleted files from the deploy branc

  deploy:
    name: Publish üêçüì¶ to PyPI
    needs:
    - build_sdist
    - build_wheels

    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true
    - name: Publish üêçüì¶ to TestPyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish üêçüì¶ to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
